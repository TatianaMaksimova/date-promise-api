{"version":3,"sources":["js/promise-api.js"],"names":["promise","Promise","resolve","reject","canFulfilles","Math","random","setTimeout","onFulfilled","result","console","log","onRejected","error","then","x","y","catch","finally"],"mappings":";;;AA8EA,aA9EA,QAAA,0BAEA,MAAMA,EAAU,IAAIC,QAAQ,CAACC,EAASC,KAC9BC,MAAAA,EAAeC,KAAKC,SAAW,GAErCC,WAAW,KACLH,GACFF,EAAQ,yCAGVC,EAAO,2CACN,OASL,SAASK,EAAYC,GACnBC,QAAQC,IAAIF,GAGd,SAASG,EAAWC,GAClBH,QAAQC,IAAIE,GA0Cdb,EACGc,KAAKN,GACLM,KAAKC,IACJL,QAAQC,IAAII,GAEL,KAERD,KAAKE,GAAKN,QAAQC,IAAIK,IACtBC,MAAMJ,GAASH,QAAQC,IAAIE,IAC3BK,QAAQ,IAAMR,QAAQC,IAAI","file":"promise-api.0158983f.js","sourceRoot":"../src","sourcesContent":["import '../css/work-common.css';\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfilles = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfilles) {\n      resolve('Промис выполнился успешно (fulfilled)');\n    }\n\n    reject('Промис выполнился с ошибкой (rejected)');\n  }, 2000);\n});\n\n// then(onSuccess, onError);\n// console.log(`✅ ${result}`);\n// console.log(`❌ ${error}`);\n\n// promise.then(onFulfilled, onRejected);\n\nfunction onFulfilled(result) {\n  console.log(result);\n}\n\nfunction onRejected(error) {\n  console.log(error);\n}\n\n// =================Цепочки промисов (chaining)=============\n// =================Promise.prototype.catch(error)==========\n// =================Promise.prototype.finally()=============\n\n// promise\n//   .then(result => {\n//     console.log(result);\n\n//     return 3;\n//   })\n//   .then(x => {\n//     console.log(x);\n\n//     return 20;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   });\n\n// ============================================\n// promise\n//   .then(onFulfilled, onRejected)\n//   .then(\n//     x => {\n//       console.log(x);\n\n//       throw new Error('ошибка во втором then');\n\n//       return 20;\n//     },\n//     error => console.log(error),\n//   )\n//   .then(\n//     y => console.log(y),\n//     error => console.log(error),\n//   );\n\n// ===============================================\n\npromise\n  .then(onFulfilled)\n  .then(x => {\n    console.log(x);\n    // throw new Error('ошибка во втором then');\n    return 20;\n  })\n  .then(y => console.log(y))\n  .catch(error => console.log(error))\n  .finally(() => console.log('Я буду выполнен в любом случае'));\n\n// ! В then выносим только успешное выполнение промиса, а неуспешное в catch, в конце цепочки.\n"]}