{"version":3,"sources":["js/promisification.js"],"names":[],"mappings":";;;AAAA,aAAA,QAAA","file":"promisification.33b42bd4.js","sourceRoot":"../src","sourcesContent":["import '../css/work-common.css';\n// промис чистит функции, они не знают о том коде, который их вызывает\n\n// const makeOrder = dish => {\n//   const DELAY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('вот ваше блюдо');\n//       }\n//       reject('извините, закончились продукты');\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n/*=======================================================\n\n * Промисификация «синхронных» функций\n * - Promise.resolve()\n * - Promise.reject()\n */\n\n// const makeOrder = dish => {\n//   return Promise.resolve(`✅ Вот ваш заказ: ${dish}`);\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n// ======================================================\n\n/*\n * Покемоны с https://pokeapi.co/\n */\n\n// const fetchPokemonById = id => {\n//   return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());\n// };\n\n// fetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);\n\n// fetchPokemonById(2).then(onFetchSuccess).catch(onFetchError);\n\n// fetchPokemonById(3).then(onFetchSuccess).catch(onFetchError);\n\n// function onFetchSuccess(pokemon) {\n//   console.log('onFetchSuccess -> onFetchSuccess');\n//   console.log(pokemon);\n// }\n\n// function onFetchError(error) {\n//   console.log('onFetchError -> onFetchError');\n//   console.log('Это в блоке catch');\n//   console.log(error);\n// }\n\n// ======================================================\n\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('✅ Куку это resolve');\n//       }\n\n//       reject('❌ все пропало это reject');\n//     }, 2000);\n//   });\n// };\n\n// makePromise()\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\n"]}