{"version":3,"sources":["js/timer.js"],"names":["refs","startBtn","document","querySelector","stopBtn","clockface","Timer","constructor","onTick","intervalId","isActive","init","time","getTimeComponents","start","startTime","Date","now","setInterval","currentTime","deltaTime","stop","clearInterval","hours","pad","Math","floor","mins","secs","value","String","padStart","timer","updateClockface","textContent","addEventListener","bind"],"mappings":";;;AA4EC,aA5ED,QAAA,0BAEA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAGpC,MAAMG,EACJC,aAAY,OAAEC,IACPC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EACTG,KAAAA,OAGPA,OACQC,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,GAGdE,QACM,GAAA,KAAKJ,SACP,OAGIK,MAAAA,EAAYC,KAAKC,MAClBP,KAAAA,UAAW,EAEXD,KAAAA,WAAaS,YAAY,KACtBC,MACAC,EADcJ,KAAKC,MACOF,EAC1BH,EAAO,KAAKC,kBAAkBO,GAE/BZ,KAAAA,OAAOI,IACX,KAGLS,OACEC,cAAc,KAAKb,YACdC,KAAAA,UAAW,EACVE,MAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,GAGdC,kBAAkBD,GAKT,MAAA,CAAEW,MAJK,KAAKC,IAAIC,KAAKC,MAAOd,EAAQ,MAAyB,OAIpDe,KAHH,KAAKH,IAAIC,KAAKC,MAAOd,EAAQ,KAAoB,MAGxCgB,KAFT,KAAKJ,IAAIC,KAAKC,MAAOd,EAAQ,IAAc,OAM1DY,IAAIK,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAI1B,EAAM,CACtBE,OAAQyB,IAcV,SAASA,GAAgB,MAAEV,EAAF,KAASI,EAAT,KAAeC,IACtC5B,EAAKK,UAAU6B,eAAiBX,KAASI,KAAQC,IALnD5B,EAAKC,SAASkC,iBAAiB,QAASH,EAAMlB,MAAMsB,KAAKJ,IACzDhC,EAAKI,QAAQ+B,iBAAiB,QAASH,EAAMX,KAAKe,KAAKJ","file":"timer.047ca963.js","sourceRoot":"../src","sourcesContent":["import '../css/work-common.css';\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.init();\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    const startTime = Date.now();\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  getTimeComponents(time) {\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n\n  // Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({\n  onTick: updateClockface,\n});\n\n// refs.startBtn.addEventListener('click', () => {\n//   timer.start();\n// });\n// refs.stopBtn.addEventListener('click', () => {\n//   timer.stop();\n// });\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// внешняя функция для обновления интерфейса\nfunction updateClockface({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n"]}