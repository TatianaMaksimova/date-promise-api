{"version":3,"sources":["js/racetrack.js"],"names":["horses","raceCounter","refs","startBtn","document","querySelector","winnerField","progressField","tableBody","onStart","promises","map","run","updateWinnerField","updateProgressField","determineWinner","waitForAll","horsesP","Promise","race","then","horse","time","updateResultsTable","all","message","textContent","tr","insertAdjacentHTML","resolve","reject","getRandomTime","setTimeout","min","max","Math","floor","random","addEventListener"],"mappings":";;;AA8FC,aA9FD,QAAA,0BAEA,MAAMA,EAAS,CAAC,cAAe,UAAW,kBAAmB,aAAc,cAE3E,IAAIC,EAAc,EAClB,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAKpC,SAASI,IACPR,GAAe,EACTS,MAAAA,EAAWV,EAAOW,IAAIC,GAE5BC,EAAkB,IAClBC,EAAoB,4CACpBC,EAAgBL,GAChBM,EAAWN,GAGb,SAASK,EAAgBE,GACvBC,QAAQC,KAAKF,GAASG,KAAK,EAAGC,MAAAA,EAAOC,KAAAA,MACnCT,gBAAgCQ,qBAAyBC,oBAEzDC,EAAmB,CAAEF,MAAAA,EAAOC,KAAAA,EAAMrB,YAAAA,MAItC,SAASe,EAAWC,GAClBC,QAAQM,IAAIP,GAASG,KAAK,KACxBN,EAAoB,2CAIxB,SAASD,EAAkBY,GACzBvB,EAAKI,YAAYoB,YAAcD,EAGjC,SAASX,EAAoBW,GAC3BvB,EAAKK,cAAcmB,YAAcD,EAGnC,SAASF,GAAmB,MAAEF,EAAF,KAASC,EAAT,YAAerB,IACnC0B,MAAAA,aAAgB1B,aAAuBoB,aAAiBC,cAC9DpB,EAAKM,UAAUoB,mBAAmB,YAAaD,GAkCjD,SAASf,EAAIS,GACJ,OAAA,IAAIH,QAAQ,CAACW,EAASC,KACrBR,MAAAA,EAAOS,EAAc,KAAM,MAEjCC,WAAW,KACTH,EAAQ,CAAER,MAAAA,EAAOC,KAAAA,KAChBA,KAIP,SAASS,EAAcE,EAAKC,GACnBC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAjFtD/B,EAAKC,SAASmC,iBAAiB,QAAS7B","file":"racetrack.0e483f4c.js","sourceRoot":"../src","sourcesContent":["import '../css/work-common.css';\n\nconst horses = ['Secretariat', 'Eclipse', 'West Australian', 'Flying Fox', 'Seabiscuit'];\n\nlet raceCounter = 0;\nconst refs = {\n  startBtn: document.querySelector('.js-start-race'),\n  winnerField: document.querySelector('.js-winner'),\n  progressField: document.querySelector('.js-progress'),\n  tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n  raceCounter += 1;\n  const promises = horses.map(run);\n\n  updateWinnerField('');\n  updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');\n  determineWinner(promises);\n  waitForAll(promises);\n}\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}\n      –≤—Ä–µ–º–µ–Ω–∏`);\n    updateResultsTable({ horse, time, raceCounter });\n  });\n}\n\nfunction waitForAll(horsesP) {\n  Promise.all(horsesP).then(() => {\n    updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');\n  });\n}\n\nfunction updateWinnerField(message) {\n  refs.winnerField.textContent = message;\n}\n\nfunction updateProgressField(message) {\n  refs.progressField.textContent = message;\n}\n\nfunction updateResultsTable({ horse, time, raceCounter }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n  refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\n// console.log('%c ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!', 'color: red; font-size: 14px;');\n\n// const promises = horses.map(horse => run(horse)); //// –≤—ã—à–µ –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å\n\n/*\n * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞\n */\n\n// =========================–°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –ª–æ—à–∞–¥—å:\n// Promise.race(promises).then(({ horse, time }) => {\n//   console.log(\n//     `%c üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}\n//     –≤—Ä–µ–º–µ–Ω–∏`,\n//     'color: green; font-size: 14px;',\n//   );\n// });\n// 1\n// 2\n// 3\n// 4\n\n/*\n * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤\n */\n\n// Promise.all(promises).then(() => {\n//   console.log('%c üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.', 'color: blue; font-size: 14px;');\n// });\n\n// run('qwe').then(x => console.log(x));\n\nfunction run(horse) {\n  return new Promise((resolve, reject) => {\n    const time = getRandomTime(2500, 3500);\n\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]}